@implements IDisposable
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<h3>Gantt @GanttId</h3>

@* Make sure Blazor does not interact with this DOM because jQuery widgets rely on DOM manipulations 
	and if Blazor cleans it up or modifies it, it is likely to break the widgets *@
<div @ref="myWrapperRef">
	<div id="@GanttId"></div>
</div>

<hr />

@code {
    private ElementReference myWrapperRef; // we will use this to know which instance of the component calls the code
    [Parameter]  public string GanttId { get; set; }

    // see the following article on using JS Interop, prerendering and Blazor as these approaches may change
    // https://docs.microsoft.com/en-us/aspnet/core/blazor/javascript-interop?view=aspnetcore-3.0

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeAsync<object>("createGanttWidget", myWrapperRef, GanttId);
            // make sure the element IDs are unique in the application. In this example, the ID comes from a parameter
            // you can distinguish elements in the DOM with jQuery in other ways as well, but IDs and name attributes are often used
        }

        // you can also pass more data and use it in the JS code as necessary by your application
        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        JSRuntime.InvokeAsync<object>("destroyGanttWidget", myWrapperRef, GanttId);
    }
}

